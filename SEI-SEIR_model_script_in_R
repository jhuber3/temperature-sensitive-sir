# This is a struct for the implementation of the SEI-SEIR model.
# Parameter values are defined as follows:
# x[0] = M1; x[1] = M2; x[2] = M3; x[3] = S; x[4] = E; x[5] = I; x[6] = R;
# dxdt[0] = dM1; dxdt[1] = dM2; dxdt[2] = dM3; dxdt[3] = dS; dxdt[4] = dE;
# dxdt[5] = dI; dxdt[6] = dR;
# For more documentation, please see Huber et al

## SEI-SEIR DENV simulation model
seiseir_model <- function(t, state, parameters) {
  with(as.list(c(state,parameters)), {
    dM1 <- (EFD(temp[t])*pEA(temp[t])*MDR(temp[t])*mu(temp[t])^(-1))*(M1+M2+M3)*(1-((M1+M2+M3)/K(temp[t])))-(a(temp[t])*pMI(temp[t])*I/(S+E+I+R)+mu(temp[t]))*M1
    dM2 <- (a(temp[t])*pMI(temp[t])*I/(S+E+I+R))*M1-(PDR(temp[t])+mu(temp[t]))*M2
    dM3 <- PDR(temp[t])*M2-mu(temp[t])*M3
    dS <- -a(temp[t])*b(temp[t])*(M3/(M1+M2+M3+0.001))*S
    dE <- a(temp[t])*b(temp[t])*(M3/(M1+M2+M3+0.001))*S-(1.0/5.9)*E
    dI <- (1.0/5.9)*E-(1.0/5.0)*I
    dR <- (1.0/5.0)*I
    list(c(dM1, dM2, dM3, dS, dE, dI, dR))
  })
}    

seiseir_constant_model <- function(t, state, parameters) {
  with(as.list(c(state,parameters)), {
    dM1 <- (EFD(temp)*pEA(temp)*MDR(temp))*(M1+M2+M3)*(1-((M1+M2+M3)/K(temp)))-(a(temp)*pMI(temp)*I/(S+E+I+R)+mu(temp))*M1
    dM2 <- (a(temp)*pMI(temp)*I/(S+E+I+R))*M1-(PDR(temp)+mu(temp))*M2
    dM3 <- PDR(temp)*M2-mu(temp)*M3
    dS <- -a(temp)*b(temp)*(M3/(M1+M2+M3+0.001))*S
    dE <- a(temp)*b(temp)*(M3/(M1+M2+M3+0.001))*S-(1.0/5.9)*E
    dI <- (1.0/5.9)*E-(1.0/5.0)*I
    dR <- (1.0/5.0)*I
    list(c(dM1, dM2, dM3, dS, dE, dI, dR))
  })
}

# This is the general function for the Briere fit.
# For more documentation, see temperaturesensitivefunctions.hpp

briere <- function(x, c, T0, Tm){
  if((x < T0) | (x > Tm))
    0.0
  else
    c*x*(x-T0)*sqrt(Tm-x)
}

# This is the general function for the quadratic fit. 
# For more documentation, see temperaturesensitivefunctions.hpp

quadratic <- function(x, c, T0, Tm){
  if((x < T0) | (x > Tm))
    0.0
  else
    c*(x-T0)*(x-Tm)
}

# This is the general function for the inverted quadratic fit.
# For more documentation, see temperaturesensitivefunctions.hpp

inverted_quadratic <- function(x, c, T0, Tm){
  if((x < T0) | (x > Tm))
    24.0
  else
    1.0/(c*(x-T0)*(x-Tm))
}

# These are the temperature-senstive entomological parameters for the
# Ae. aegypti vector. Further documentation regarding each function is found in
# the temperaturesensitivefunctions.hpp file

EFD <- function(temp){
  briere(temp,8.56e-03,14.58,34.61)
#  briere(temp,2.08e-02,29,41)
}

pEA <- function(temp){
  quadratic(temp,-5.99e-03,13.56,38.29)
}

MDR <- function(temp){
  briere(temp,7.86e-05,11.36,39.17)
}

a <- function(temp){
  briere(temp,2.02e-04,13.35,40.08)
}

pMI <- function(temp){
  briere(temp,4.91e-04,12.22,37.46)
}

mu <- function(temp){
  inverted_quadratic(temp,-1.48e-01,9.16,37.73)
}

PDR <- function(temp){
  briere(temp,6.56e-05,10.68,45.90)
}

b <- function(temp){
  briere(temp,8.49e-04,17.05,35.83)
}

carrying_capacity <- function(temp, T0, EA, N){
  kappa <- 8.617e-05; # Boltzmann constant 
  alpha <- (EFD(T0)*pEA(T0)*MDR(T0)*mu(T0)^(-1)-mu(T0))/(EFD(T0)*pEA(T0)*MDR(T0)*mu(T0)^(-1))
  (alpha*N*exp(-EA*((temp-T0)^2)/(kappa*(temp+273.0)*(T0+273.0))))
}

K <- function(temp){
  carrying_capacity(temp,29.0,0.05,20000)
}
